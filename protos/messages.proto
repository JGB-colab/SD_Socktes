syntax = "proto3";

// Enum para definir os tipos de dispositivos conhecidos pelo sistema.
// O Python usa `self.tipo.upper()` para encontrar esses valores.
enum DeviceType {
  UNKNOWN = 0; // O valor padrão para um enum proto3 deve ser 0.
  LIGHT_POST = 1;
  TRAFFIC_LIGHT = 2;
  CAMERA = 3; 
  TEMPERATURE_SENSOR = 4;
  AIR_QUALITY_SENSOR = 5;
}

// 1. Mensagem para o anúncio de um dispositivo.
// Usada quando um dispositivo responde a um pedido de descoberta do gateway.
// Corresponde ao método `send_announcement`.
message DeviceInfo {
  string device_id = 1;
  DeviceType type = 2;
  string ip_address = 3;
  int32 port = 4;
  bool is_actuator = 5;
}

// 2. Mensagem para enviar um comando a um atuador.
// Usada pelo gateway para controlar um dispositivo.
// Corresponde ao método `handle_connection` da classe `Atuador`.

message Command {
  bool state = 1; // true para "ligar", false para "desligar".
  // Poderia ser estendido com mais campos, como "cor", "intensidade", etc.
}

// 3. Mensagem para enviar dados de um sensor.
// Usada por um sensor para enviar leituras contínuas ao gateway.
// Corresponde ao método `start_sending_data` da classe `Continuos`.
message SensorData {
  string device_id = 1;
  double value = 2; // Usamos 'double' para valores de ponto flutuante.
  string unit = 3;  // Ex: "Celsius", "µg/m³"
}

// A MENSAGEM PRINCIPAL: um contêiner para todas as outras.
// O `oneof` garante que a mensagem carregue apenas UM tipo de dado por vez,
// tornando-a eficiente e clara sobre sua intenção.
message SmartCityMessage {
  oneof payload {
    DeviceInfo devices = 1;     // Usado para anúncios de dispositivos
    Command command = 2;        // Usado para enviar comandos
    SensorData sensor_data = 3; // Usado para enviar dados de sensores
  }
}